

Microchip MPLAB XC8 Assembler V2.05 build -831301201 
                                                                                               Fri Oct 29 09:39:26 2021

Microchip MPLAB XC8 C Compiler v2.05 (Free license) build 20181220022703 Og1 
     1                           	processor	16F1823
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,merge=1,delta=2
     5                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
     7                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
     8                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
     9                           	psect	text1,local,class=CODE,merge=1,delta=2
    10                           	psect	text2,local,class=CODE,merge=1,delta=2
    11                           	psect	text3,local,class=CODE,merge=1,delta=2
    12                           	dabs	1,0x7E,2
    13  0000                     
    14                           ; Version 2.05
    15                           ; Generated 20/12/2018 GMT
    16                           ; 
    17                           ; Copyright Â© 2018, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16F1823 Definitions
    46                           ; 
    47                           ; SFR Addresses
    48  0000                     	;# 
    49  0001                     	;# 
    50  0002                     	;# 
    51  0003                     	;# 
    52  0004                     	;# 
    53  0005                     	;# 
    54  0006                     	;# 
    55  0007                     	;# 
    56  0008                     	;# 
    57  0009                     	;# 
    58  000A                     	;# 
    59  000B                     	;# 
    60  000C                     	;# 
    61  000E                     	;# 
    62  0011                     	;# 
    63  0012                     	;# 
    64  0015                     	;# 
    65  0016                     	;# 
    66  0016                     	;# 
    67  0017                     	;# 
    68  0018                     	;# 
    69  0019                     	;# 
    70  001A                     	;# 
    71  001B                     	;# 
    72  001C                     	;# 
    73  001E                     	;# 
    74  001F                     	;# 
    75  008C                     	;# 
    76  008E                     	;# 
    77  0091                     	;# 
    78  0092                     	;# 
    79  0095                     	;# 
    80  0096                     	;# 
    81  0097                     	;# 
    82  0098                     	;# 
    83  0099                     	;# 
    84  009A                     	;# 
    85  009B                     	;# 
    86  009B                     	;# 
    87  009C                     	;# 
    88  009D                     	;# 
    89  009E                     	;# 
    90  010C                     	;# 
    91  010E                     	;# 
    92  0111                     	;# 
    93  0112                     	;# 
    94  0113                     	;# 
    95  0114                     	;# 
    96  0115                     	;# 
    97  0116                     	;# 
    98  0117                     	;# 
    99  0118                     	;# 
   100  0119                     	;# 
   101  011A                     	;# 
   102  011B                     	;# 
   103  011D                     	;# 
   104  011D                     	;# 
   105  018C                     	;# 
   106  018E                     	;# 
   107  0191                     	;# 
   108  0191                     	;# 
   109  0192                     	;# 
   110  0193                     	;# 
   111  0193                     	;# 
   112  0193                     	;# 
   113  0194                     	;# 
   114  0195                     	;# 
   115  0196                     	;# 
   116  0199                     	;# 
   117  019A                     	;# 
   118  019B                     	;# 
   119  019B                     	;# 
   120  019B                     	;# 
   121  019B                     	;# 
   122  019C                     	;# 
   123  019C                     	;# 
   124  019D                     	;# 
   125  019E                     	;# 
   126  019F                     	;# 
   127  020C                     	;# 
   128  020E                     	;# 
   129  0211                     	;# 
   130  0211                     	;# 
   131  0212                     	;# 
   132  0212                     	;# 
   133  0213                     	;# 
   134  0213                     	;# 
   135  0214                     	;# 
   136  0214                     	;# 
   137  0215                     	;# 
   138  0215                     	;# 
   139  0215                     	;# 
   140  0216                     	;# 
   141  0216                     	;# 
   142  0217                     	;# 
   143  0217                     	;# 
   144  0291                     	;# 
   145  0291                     	;# 
   146  0292                     	;# 
   147  0293                     	;# 
   148  0294                     	;# 
   149  0295                     	;# 
   150  0295                     	;# 
   151  0296                     	;# 
   152  0391                     	;# 
   153  0392                     	;# 
   154  0393                     	;# 
   155  039A                     	;# 
   156  039C                     	;# 
   157  039D                     	;# 
   158  039E                     	;# 
   159  039F                     	;# 
   160  0FE4                     	;# 
   161  0FE5                     	;# 
   162  0FE6                     	;# 
   163  0FE7                     	;# 
   164  0FE8                     	;# 
   165  0FE9                     	;# 
   166  0FEA                     	;# 
   167  0FEB                     	;# 
   168  0FED                     	;# 
   169  0FEE                     	;# 
   170  0FEF                     	;# 
   171  0000                     	;# 
   172  0001                     	;# 
   173  0002                     	;# 
   174  0003                     	;# 
   175  0004                     	;# 
   176  0005                     	;# 
   177  0006                     	;# 
   178  0007                     	;# 
   179  0008                     	;# 
   180  0009                     	;# 
   181  000A                     	;# 
   182  000B                     	;# 
   183  000C                     	;# 
   184  000E                     	;# 
   185  0011                     	;# 
   186  0012                     	;# 
   187  0015                     	;# 
   188  0016                     	;# 
   189  0016                     	;# 
   190  0017                     	;# 
   191  0018                     	;# 
   192  0019                     	;# 
   193  001A                     	;# 
   194  001B                     	;# 
   195  001C                     	;# 
   196  001E                     	;# 
   197  001F                     	;# 
   198  008C                     	;# 
   199  008E                     	;# 
   200  0091                     	;# 
   201  0092                     	;# 
   202  0095                     	;# 
   203  0096                     	;# 
   204  0097                     	;# 
   205  0098                     	;# 
   206  0099                     	;# 
   207  009A                     	;# 
   208  009B                     	;# 
   209  009B                     	;# 
   210  009C                     	;# 
   211  009D                     	;# 
   212  009E                     	;# 
   213  010C                     	;# 
   214  010E                     	;# 
   215  0111                     	;# 
   216  0112                     	;# 
   217  0113                     	;# 
   218  0114                     	;# 
   219  0115                     	;# 
   220  0116                     	;# 
   221  0117                     	;# 
   222  0118                     	;# 
   223  0119                     	;# 
   224  011A                     	;# 
   225  011B                     	;# 
   226  011D                     	;# 
   227  011D                     	;# 
   228  018C                     	;# 
   229  018E                     	;# 
   230  0191                     	;# 
   231  0191                     	;# 
   232  0192                     	;# 
   233  0193                     	;# 
   234  0193                     	;# 
   235  0193                     	;# 
   236  0194                     	;# 
   237  0195                     	;# 
   238  0196                     	;# 
   239  0199                     	;# 
   240  019A                     	;# 
   241  019B                     	;# 
   242  019B                     	;# 
   243  019B                     	;# 
   244  019B                     	;# 
   245  019C                     	;# 
   246  019C                     	;# 
   247  019D                     	;# 
   248  019E                     	;# 
   249  019F                     	;# 
   250  020C                     	;# 
   251  020E                     	;# 
   252  0211                     	;# 
   253  0211                     	;# 
   254  0212                     	;# 
   255  0212                     	;# 
   256  0213                     	;# 
   257  0213                     	;# 
   258  0214                     	;# 
   259  0214                     	;# 
   260  0215                     	;# 
   261  0215                     	;# 
   262  0215                     	;# 
   263  0216                     	;# 
   264  0216                     	;# 
   265  0217                     	;# 
   266  0217                     	;# 
   267  0291                     	;# 
   268  0291                     	;# 
   269  0292                     	;# 
   270  0293                     	;# 
   271  0294                     	;# 
   272  0295                     	;# 
   273  0295                     	;# 
   274  0296                     	;# 
   275  0391                     	;# 
   276  0392                     	;# 
   277  0393                     	;# 
   278  039A                     	;# 
   279  039C                     	;# 
   280  039D                     	;# 
   281  039E                     	;# 
   282  039F                     	;# 
   283  0FE4                     	;# 
   284  0FE5                     	;# 
   285  0FE6                     	;# 
   286  0FE7                     	;# 
   287  0FE8                     	;# 
   288  0FE9                     	;# 
   289  0FEA                     	;# 
   290  0FEB                     	;# 
   291  0FED                     	;# 
   292  0FEE                     	;# 
   293  0FEF                     	;# 
   294  000E                     _PORTC	set	14
   295  000C                     _PORTA	set	12
   296  005F                     _GIE	set	95
   297  0098                     _OSCTUNE	set	152
   298  0099                     _OSCCON	set	153
   299  008E                     _TRISC	set	142
   300  008C                     _TRISA	set	140
   301  009B                     _ADRESL	set	155
   302  009C                     _ADRESH	set	156
   303  04F1                     _ADPREF1	set	1265
   304  04F0                     _ADPREF0	set	1264
   305  04F6                     _ADCS2	set	1270
   306  04F5                     _ADCS1	set	1269
   307  04F4                     _ADCS0	set	1268
   308  04F7                     _ADFM	set	1271
   309  04E9                     _GO_nDONE	set	1257
   310  04E8                     _ADON	set	1256
   311  04EE                     _CHS4	set	1262
   312  04ED                     _CHS3	set	1261
   313  04EC                     _CHS2	set	1260
   314  04EB                     _CHS1	set	1259
   315  04EA                     _CHS0	set	1258
   316  010E                     _LATC	set	270
   317  010C                     _LATA	set	268
   318  010E                     _LATCbits	set	270
   319  010C                     _LATAbits	set	268
   320  018E                     _ANSELC	set	398
   321  018C                     _ANSELA	set	396
   322  0196                     _EECON2	set	406
   323  0193                     _EEDATL	set	403
   324  0191                     _EEADRL	set	401
   325  0CA8                     _RD	set	3240
   326  0CAA                     _WREN	set	3242
   327  0CA9                     _WR	set	3241
   328                           
   329                           ; #config settings
   330  0000                     
   331                           	psect	cinit
   332  07FE                     start_initialization:	
   333  07FE                     __initialization:	
   334  07FE                     end_of_initialization:	
   335                           ;End of C runtime variable initialization code
   336                           
   337  07FE                     __end_of__initialization:	
   338  07FE  0020               	movlb	0
   339  07FF  2F10               	ljmp	_main	;jump to C main() function
   340                           
   341                           	psect	cstackBANK1
   342  00A0                     __pcstackBANK1:	
   343  00A0                     main@bit_low_adrsl_read:	
   344                           
   345                           ; 2 bytes @ 0x0
   346  00A0                     	ds	2
   347  00A2                     main@bit_high_adrsl_read:	
   348                           
   349                           ; 2 bytes @ 0x2
   350  00A2                     	ds	2
   351  00A4                     main@max:	
   352                           
   353                           ; 2 bytes @ 0x4
   354  00A4                     	ds	2
   355  00A6                     main@b:	
   356                           
   357                           ; 2 bytes @ 0x6
   358  00A6                     	ds	2
   359  00A8                     main@a:	
   360                           
   361                           ; 2 bytes @ 0x8
   362  00A8                     	ds	2
   363  00AA                     main@min:	
   364                           
   365                           ; 2 bytes @ 0xA
   366  00AA                     	ds	2
   367  00AC                     main@bit_low_adrsh_read:	
   368                           
   369                           ; 2 bytes @ 0xC
   370  00AC                     	ds	2
   371  00AE                     main@bit_high_adrsh_read:	
   372                           
   373                           ; 2 bytes @ 0xE
   374  00AE                     	ds	2
   375                           
   376                           	psect	cstackCOMMON
   377  0070                     __pcstackCOMMON:	
   378  0070                     ?_pisca_led:	
   379  0070                     ??_pisca_led:	
   380                           ; 1 bytes @ 0x0
   381                           
   382  0070                     ?_tbat_media:	
   383                           ; 1 bytes @ 0x0
   384                           
   385  0070                     ?_eeprom_read_code:	
   386                           ; 2 bytes @ 0x0
   387                           
   388  0070                     ?_main:	
   389                           ; 2 bytes @ 0x0
   390                           
   391  0070                     eeprom_read_code@ADRL:	
   392                           ; 2 bytes @ 0x0
   393                           
   394                           
   395                           ; 2 bytes @ 0x0
   396  0070                     	ds	2
   397  0072                     ??_tbat_media:	
   398  0072                     ??_eeprom_read_code:	
   399                           ; 1 bytes @ 0x2
   400                           
   401                           
   402                           ; 1 bytes @ 0x2
   403  0072                     	ds	2
   404  0074                     ??_main:	
   405                           
   406                           ; 1 bytes @ 0x4
   407  0074                     	ds	2
   408                           
   409                           	psect	cstackBANK0
   410  0020                     __pcstackBANK0:	
   411  0020                     tbat_media@adcValues:	
   412                           
   413                           ; 64 bytes @ 0x0
   414  0020                     	ds	64
   415  0060                     tbat_media@adc_Reading:	
   416                           
   417                           ; 2 bytes @ 0x40
   418  0060                     	ds	2
   419  0062                     tbat_media@adc_Return:	
   420                           
   421                           ; 2 bytes @ 0x42
   422  0062                     	ds	2
   423  0064                     tbat_media@adc_Average:	
   424                           
   425                           ; 2 bytes @ 0x44
   426  0064                     	ds	2
   427  0066                     tbat_media@adc_index:	
   428                           
   429                           ; 1 bytes @ 0x46
   430  0066                     	ds	1
   431  0067                     tbat_media@i:	
   432                           
   433                           ; 2 bytes @ 0x47
   434  0067                     	ds	2
   435                           
   436                           	psect	maintext
   437  0710                     __pmaintext:	
   438 ;;
   439 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
   440 ;;
   441 ;; *************** function _main *****************
   442 ;; Defined at:
   443 ;;		line 208 in file "main.c"
   444 ;; Parameters:    Size  Location     Type
   445 ;;		None
   446 ;; Auto vars:     Size  Location     Type
   447 ;;  bit_high_adr    2   14[BANK1 ] unsigned int 
   448 ;;  bit_low_adrs    2   12[BANK1 ] unsigned int 
   449 ;;  min             2   10[BANK1 ] unsigned int 
   450 ;;  a               2    8[BANK1 ] int 
   451 ;;  b               2    6[BANK1 ] int 
   452 ;;  max             2    4[BANK1 ] unsigned int 
   453 ;;  bit_high_adr    2    2[BANK1 ] unsigned int 
   454 ;;  bit_low_adrs    2    0[BANK1 ] unsigned int 
   455 ;; Return value:  Size  Location     Type
   456 ;;                  2  114[None  ] int 
   457 ;; Registers used:
   458 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
   459 ;; Tracked objects:
   460 ;;		On entry : B1F/0
   461 ;;		On exit  : 0/0
   462 ;;		Unchanged: 0/0
   463 ;; Data sizes:     COMMON   BANK0   BANK1
   464 ;;      Params:         0       0       0
   465 ;;      Locals:         0       0      16
   466 ;;      Temps:          2       0       0
   467 ;;      Totals:         2       0      16
   468 ;;Total ram usage:       18 bytes
   469 ;; Hardware stack levels required when called:    1
   470 ;; This function calls:
   471 ;;		_eeprom_read_code
   472 ;;		_pisca_led
   473 ;;		_tbat_media
   474 ;; This function is called by:
   475 ;;		Startup code after reset
   476 ;; This function uses a non-reentrant model
   477 ;;
   478                           
   479                           
   480                           ;psect for function _main
   481  0710                     _main:	
   482                           
   483                           ;main.c: 210:     TRISA = 0b00001010;
   484                           
   485                           ;incstack = 0
   486                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
   487  0710  300A               	movlw	10
   488  0711  0021               	movlb	1	; select bank1
   489  0712  008C               	movwf	12	;volatile
   490                           
   491                           ;main.c: 211:     PORTA = 0b00010000;
   492  0713  3010               	movlw	16
   493  0714  0020               	movlb	0	; select bank0
   494  0715  008C               	movwf	12	;volatile
   495                           
   496                           ;main.c: 212:     LATA = 0b00010000;
   497  0716  3010               	movlw	16
   498  0717  0022               	movlb	2	; select bank2
   499  0718  008C               	movwf	12	;volatile
   500                           
   501                           ;main.c: 213:     ANSELA = 0b00001010;
   502  0719  300A               	movlw	10
   503  071A  0023               	movlb	3	; select bank3
   504  071B  008C               	movwf	12	;volatile
   505                           
   506                           ;main.c: 216:     TRISC = 0b00000100;
   507  071C  3004               	movlw	4
   508  071D  0021               	movlb	1	; select bank1
   509  071E  008E               	movwf	14	;volatile
   510                           
   511                           ;main.c: 217:     PORTC = 0b00100000;
   512  071F  3020               	movlw	32
   513  0720  0020               	movlb	0	; select bank0
   514  0721  008E               	movwf	14	;volatile
   515                           
   516                           ;main.c: 218:     LATC = 0b00100000;
   517  0722  3020               	movlw	32
   518  0723  0022               	movlb	2	; select bank2
   519  0724  008E               	movwf	14	;volatile
   520                           
   521                           ;main.c: 219:     ANSELC = 0b00000100;
   522  0725  3004               	movlw	4
   523  0726  0023               	movlb	3	; select bank3
   524  0727  008E               	movwf	14	;volatile
   525                           
   526                           ;main.c: 222:     OSCCON = 0b01011011;
   527  0728  305B               	movlw	91
   528  0729  0021               	movlb	1	; select bank1
   529  072A  0099               	movwf	25	;volatile
   530                           
   531                           ;main.c: 223:     OSCTUNE = 0b00000000;
   532  072B  0198               	clrf	24	;volatile
   533                           
   534                           ;main.c: 227:     ADFM = 1;
   535  072C  179E               	bsf	30,7	;volatile
   536                           
   537                           ;main.c: 228:     ADCS0 = 0;
   538  072D  121E               	bcf	30,4	;volatile
   539                           
   540                           ;main.c: 229:     ADCS1 = 0;
   541  072E  129E               	bcf	30,5	;volatile
   542                           
   543                           ;main.c: 230:     ADCS2 = 1;
   544  072F  171E               	bsf	30,6	;volatile
   545                           
   546                           ;main.c: 232:     ADPREF0 = 0;
   547  0730  101E               	bcf	30,0	;volatile
   548                           
   549                           ;main.c: 233:     ADPREF1 = 0;
   550  0731  109E               	bcf	30,1	;volatile
   551                           
   552                           ;main.c: 235:     int b = 0;
   553  0732  01A6               	clrf	main@b^(0+128)
   554  0733  01A7               	clrf	(main@b+1)^(0+128)
   555                           
   556                           ;main.c: 236:     int a = 0;
   557  0734  01A8               	clrf	main@a^(0+128)
   558  0735  01A9               	clrf	(main@a+1)^(0+128)
   559                           
   560                           ;main.c: 238:     _delay((unsigned long)((1)*(1000000/4000.0)));
   561  0736  3053               	movlw	83
   562  0737                     u297:	
   563  0737  0B89               	decfsz	9,f
   564  0738  2F37               	goto	u297
   565  0739  0000               	nop
   566                           
   567                           ;main.c: 239:     unsigned int bit_low_adrsh_read = eeprom_read_code(0x01);
   568  073A  3001               	movlw	1
   569  073B  00F0               	movwf	eeprom_read_code@ADRL
   570  073C  3000               	movlw	0
   571  073D  00F1               	movwf	eeprom_read_code@ADRL+1
   572  073E  268C               	fcall	_eeprom_read_code
   573  073F  0871               	movf	?_eeprom_read_code+1,w
   574  0740  0021               	movlb	1	; select bank1
   575  0741  00AD               	movwf	(main@bit_low_adrsh_read+1)^(0+128)
   576  0742  0870               	movf	?_eeprom_read_code,w
   577  0743  00AC               	movwf	main@bit_low_adrsh_read^(0+128)
   578                           
   579                           ;main.c: 240:     _delay((unsigned long)((1)*(1000000/4000.0)));
   580  0744  3053               	movlw	83
   581  0745                     u307:	
   582  0745  0B89               	decfsz	9,f
   583  0746  2F45               	goto	u307
   584  0747  0000               	nop
   585                           
   586                           ;main.c: 241:     unsigned int bit_low_adrsl_read = eeprom_read_code(0x00);
   587  0748  3000               	movlw	0
   588  0749  00F0               	movwf	eeprom_read_code@ADRL
   589  074A  00F1               	movwf	eeprom_read_code@ADRL+1
   590  074B  268C               	fcall	_eeprom_read_code
   591  074C  0871               	movf	?_eeprom_read_code+1,w
   592  074D  0021               	movlb	1	; select bank1
   593  074E  00A1               	movwf	(main@bit_low_adrsl_read+1)^(0+128)
   594  074F  0870               	movf	?_eeprom_read_code,w
   595  0750  00A0               	movwf	main@bit_low_adrsl_read^(0+128)
   596                           
   597                           ;main.c: 242:     _delay((unsigned long)((1)*(1000000/4000.0)));
   598  0751  3053               	movlw	83
   599  0752                     u317:	
   600  0752  0B89               	decfsz	9,f
   601  0753  2F52               	goto	u317
   602  0754  0000               	nop
   603                           
   604                           ;main.c: 243:     bit_low_adrsh_read = (bit_low_adrsh_read<<8);
   605  0755  0021               	movlb	1	; select bank1
   606  0756  082C               	movf	main@bit_low_adrsh_read^(0+128),w
   607  0757  00F5               	movwf	??_main+1
   608  0758  01F4               	clrf	??_main
   609  0759  0874               	movf	??_main,w
   610  075A  00AC               	movwf	main@bit_low_adrsh_read^(0+128)
   611  075B  0875               	movf	??_main+1,w
   612  075C  00AD               	movwf	(main@bit_low_adrsh_read+1)^(0+128)
   613                           
   614                           ;main.c: 244:     unsigned int min = bit_low_adrsh_read+bit_low_adrsl_read;
   615  075D  0820               	movf	main@bit_low_adrsl_read^(0+128),w
   616  075E  072C               	addwf	main@bit_low_adrsh_read^(0+128),w
   617  075F  00AA               	movwf	main@min^(0+128)
   618  0760  0821               	movf	(main@bit_low_adrsl_read+1)^(0+128),w
   619  0761  3D2D               	addwfc	(main@bit_low_adrsh_read+1)^(0+128),w
   620  0762  00AB               	movwf	(main@min+1)^(0+128)
   621                           
   622                           ;main.c: 246:     _delay((unsigned long)((1)*(1000000/4000.0)));
   623  0763  3053               	movlw	83
   624  0764                     u327:	
   625  0764  0B89               	decfsz	9,f
   626  0765  2F64               	goto	u327
   627  0766  0000               	nop
   628                           
   629                           ;main.c: 247:     unsigned int bit_high_adrsl_read = eeprom_read_code(0x02);
   630  0767  3002               	movlw	2
   631  0768  00F0               	movwf	eeprom_read_code@ADRL
   632  0769  3000               	movlw	0
   633  076A  00F1               	movwf	eeprom_read_code@ADRL+1
   634  076B  268C               	fcall	_eeprom_read_code
   635  076C  0871               	movf	?_eeprom_read_code+1,w
   636  076D  0021               	movlb	1	; select bank1
   637  076E  00A3               	movwf	(main@bit_high_adrsl_read+1)^(0+128)
   638  076F  0870               	movf	?_eeprom_read_code,w
   639  0770  00A2               	movwf	main@bit_high_adrsl_read^(0+128)
   640                           
   641                           ;main.c: 248:     _delay((unsigned long)((1)*(1000000/4000.0)));
   642  0771  3053               	movlw	83
   643  0772                     u337:	
   644  0772  0B89               	decfsz	9,f
   645  0773  2F72               	goto	u337
   646  0774  0000               	nop
   647                           
   648                           ;main.c: 249:     unsigned int bit_high_adrsh_read = eeprom_read_code(0x03);
   649  0775  3003               	movlw	3
   650  0776  00F0               	movwf	eeprom_read_code@ADRL
   651  0777  3000               	movlw	0
   652  0778  00F1               	movwf	eeprom_read_code@ADRL+1
   653  0779  268C               	fcall	_eeprom_read_code
   654  077A  0871               	movf	?_eeprom_read_code+1,w
   655  077B  0021               	movlb	1	; select bank1
   656  077C  00AF               	movwf	(main@bit_high_adrsh_read+1)^(0+128)
   657  077D  0870               	movf	?_eeprom_read_code,w
   658  077E  00AE               	movwf	main@bit_high_adrsh_read^(0+128)
   659                           
   660                           ;main.c: 250:     _delay((unsigned long)((1)*(1000000/4000.0)));
   661  077F  3053               	movlw	83
   662  0780                     u347:	
   663  0780  0B89               	decfsz	9,f
   664  0781  2F80               	goto	u347
   665  0782  0000               	nop
   666                           
   667                           ;main.c: 251:     bit_high_adrsh_read = (bit_high_adrsh_read<<8);
   668  0783  0021               	movlb	1	; select bank1
   669  0784  082E               	movf	main@bit_high_adrsh_read^(0+128),w
   670  0785  00F5               	movwf	??_main+1
   671  0786  01F4               	clrf	??_main
   672  0787  0874               	movf	??_main,w
   673  0788  00AE               	movwf	main@bit_high_adrsh_read^(0+128)
   674  0789  0875               	movf	??_main+1,w
   675  078A  00AF               	movwf	(main@bit_high_adrsh_read+1)^(0+128)
   676                           
   677                           ;main.c: 252:     unsigned int max = bit_high_adrsh_read+bit_high_adrsl_read;
   678  078B  0822               	movf	main@bit_high_adrsl_read^(0+128),w
   679  078C  072E               	addwf	main@bit_high_adrsh_read^(0+128),w
   680  078D  00A4               	movwf	main@max^(0+128)
   681  078E  0823               	movf	(main@bit_high_adrsl_read+1)^(0+128),w
   682  078F  3D2F               	addwfc	(main@bit_high_adrsh_read+1)^(0+128),w
   683  0790  00A5               	movwf	(main@max+1)^(0+128)
   684  0791                     l1074:	
   685                           
   686                           ;main.c: 256:     _delay((unsigned long)((1)*(1000000/4000.0)));
   687  0791  3053               	movlw	83
   688  0792                     u357:	
   689  0792  0B89               	decfsz	9,f
   690  0793  2F92               	goto	u357
   691  0794  0000               	nop
   692  0795                     l1088:	
   693                           ;main.c: 257:     while( b < 2 ){
   694                           
   695                           
   696                           ;main.c: 257:     while( b < 2 ){
   697  0795  0021               	movlb	1	; select bank1
   698  0796  0827               	movf	(main@b+1)^(0+128),w
   699  0797  3A80               	xorlw	128
   700  0798  00F4               	movwf	??_main
   701  0799  3080               	movlw	128
   702  079A  0274               	subwf	??_main,w
   703  079B  1D03               	skipz
   704  079C  2F9F               	goto	u265
   705  079D  3002               	movlw	2
   706  079E  0226               	subwf	main@b^(0+128),w
   707  079F                     u265:	
   708  079F  1803               	btfsc	3,0
   709  07A0  2FC7               	goto	l1090
   710                           
   711                           ;main.c: 258:     LATAbits.LATA4 = 0;
   712  07A1  0022               	movlb	2	; select bank2
   713  07A2  120C               	bcf	12,4	;volatile
   714                           
   715                           ;main.c: 260:     if (min>tbat_media()){
   716  07A3  26B3               	fcall	_tbat_media
   717  07A4  0021               	movlb	1	; select bank1
   718  07A5  082B               	movf	(main@min+1)^(0+128),w
   719  07A6  0271               	subwf	?_tbat_media+1,w
   720  07A7  1D03               	skipz
   721  07A8  2FAB               	goto	u245
   722  07A9  082A               	movf	main@min^(0+128),w
   723  07AA  0270               	subwf	?_tbat_media,w
   724  07AB                     u245:	
   725  07AB  1803               	skipnc
   726  07AC  2FBA               	goto	l1084
   727                           
   728                           ;main.c: 261:         _delay((unsigned long)((40)*(1000000/4000.0)));
   729  07AD  300D               	movlw	13
   730  07AE  00F4               	movwf	??_main
   731  07AF  30FC               	movlw	252
   732  07B0                     u367:	
   733  07B0  0B89               	decfsz	9,f
   734  07B1  2FB0               	goto	u367
   735  07B2  0BF4               	decfsz	??_main,f
   736  07B3  2FB0               	goto	u367
   737                           
   738                           ;main.c: 262:         pisca_led();
   739  07B4  269C               	fcall	_pisca_led
   740                           
   741                           ;main.c: 263:         b++;
   742  07B5  3001               	movlw	1
   743  07B6  0021               	movlb	1	; select bank1
   744  07B7  07A6               	addwf	main@b^(0+128),f
   745  07B8  3000               	movlw	0
   746  07B9  3DA7               	addwfc	(main@b+1)^(0+128),f
   747  07BA                     l1084:	
   748                           
   749                           ;main.c: 265:     if (min<=tbat_media()){
   750  07BA  26B3               	fcall	_tbat_media
   751  07BB  0021               	movlb	1	; select bank1
   752  07BC  082B               	movf	(main@min+1)^(0+128),w
   753  07BD  0271               	subwf	?_tbat_media+1,w
   754  07BE  1D03               	skipz
   755  07BF  2FC2               	goto	u255
   756  07C0  082A               	movf	main@min^(0+128),w
   757  07C1  0270               	subwf	?_tbat_media,w
   758  07C2                     u255:	
   759  07C2  1C03               	skipc
   760  07C3  2F95               	goto	l1088
   761                           
   762                           ;main.c: 266:         b=0;
   763  07C4  01A6               	clrf	main@b^(0+128)
   764  07C5  01A7               	clrf	(main@b+1)^(0+128)
   765  07C6  2F95               	goto	l1088
   766  07C7                     l1090:	
   767                           
   768                           ;main.c: 271:     _delay((unsigned long)((1)*(1000000/4000.0)));
   769  07C7  3053               	movlw	83
   770  07C8                     u377:	
   771  07C8  0B89               	decfsz	9,f
   772  07C9  2FC8               	goto	u377
   773  07CA  0000               	nop
   774  07CB                     l1104:	
   775                           ;main.c: 272:     while( a < 2 ){
   776                           
   777                           
   778                           ;main.c: 272:     while( a < 2 ){
   779  07CB  0021               	movlb	1	; select bank1
   780  07CC  0829               	movf	(main@a+1)^(0+128),w
   781  07CD  3A80               	xorlw	128
   782  07CE  00F4               	movwf	??_main
   783  07CF  3080               	movlw	128
   784  07D0  0274               	subwf	??_main,w
   785  07D1  1D03               	skipz
   786  07D2  2FD5               	goto	u285
   787  07D3  3002               	movlw	2
   788  07D4  0228               	subwf	main@a^(0+128),w
   789  07D5                     u285:	
   790  07D5  1803               	btfsc	3,0
   791  07D6  2FF6               	goto	l125
   792                           
   793                           ;main.c: 273:     LATAbits.LATA4 = 0;
   794  07D7  0022               	movlb	2	; select bank2
   795  07D8  120C               	bcf	12,4	;volatile
   796                           
   797                           ;main.c: 275:     if (max<=tbat_media()){
   798  07D9  26B3               	fcall	_tbat_media
   799  07DA  0021               	movlb	1	; select bank1
   800  07DB  0825               	movf	(main@max+1)^(0+128),w
   801  07DC  0271               	subwf	?_tbat_media+1,w
   802  07DD  1D03               	skipz
   803  07DE  2FE1               	goto	u275
   804  07DF  0824               	movf	main@max^(0+128),w
   805  07E0  0270               	subwf	?_tbat_media,w
   806  07E1                     u275:	
   807  07E1  1C03               	skipc
   808  07E2  2FF1               	goto	l1100
   809                           
   810                           ;main.c: 276:         pisca_led();
   811  07E3  269C               	fcall	_pisca_led
   812                           
   813                           ;main.c: 277:         a++;
   814  07E4  3001               	movlw	1
   815  07E5  0021               	movlb	1	; select bank1
   816  07E6  07A8               	addwf	main@a^(0+128),f
   817  07E7  3000               	movlw	0
   818  07E8  3DA9               	addwfc	(main@a+1)^(0+128),f
   819                           
   820                           ;main.c: 278:         _delay((unsigned long)((40)*(1000000/4000.0)));
   821  07E9  300D               	movlw	13
   822  07EA  00F4               	movwf	??_main
   823  07EB  30FC               	movlw	252
   824  07EC                     u387:	
   825  07EC  0B89               	decfsz	9,f
   826  07ED  2FEC               	goto	u387
   827  07EE  0BF4               	decfsz	??_main,f
   828  07EF  2FEC               	goto	u387
   829                           
   830                           ;main.c: 279:     } else {
   831  07F0  2FCB               	goto	l1104
   832  07F1                     l1100:	
   833                           
   834                           ;main.c: 280:         a=0;
   835  07F1  01A8               	clrf	main@a^(0+128)
   836  07F2  01A9               	clrf	(main@a+1)^(0+128)
   837                           
   838                           ;main.c: 281:         LATAbits.LATA5 = 1;
   839  07F3  0022               	movlb	2	; select bank2
   840  07F4  168C               	bsf	12,5	;volatile
   841  07F5  2FCB               	goto	l1104
   842  07F6                     l125:	
   843                           
   844                           ;main.c: 285:     LATAbits.LATA5 = 0;
   845  07F6  0022               	movlb	2	; select bank2
   846  07F7  128C               	bcf	12,5	;volatile
   847                           
   848                           ;main.c: 286:     a = 0;
   849  07F8  0021               	movlb	1	; select bank1
   850  07F9  01A8               	clrf	main@a^(0+128)
   851  07FA  01A9               	clrf	(main@a+1)^(0+128)
   852                           
   853                           ;main.c: 287:     b = 0;
   854  07FB  01A6               	clrf	main@b^(0+128)
   855  07FC  01A7               	clrf	(main@b+1)^(0+128)
   856                           
   857                           ;main.c: 288:     goto inicio;
   858  07FD  2F91               	goto	l1074
   859  07FE                     __end_of_main:	
   860                           
   861                           	psect	text1
   862  06B3                     __ptext1:	
   863 ;; *************** function _tbat_media *****************
   864 ;; Defined at:
   865 ;;		line 121 in file "main.c"
   866 ;; Parameters:    Size  Location     Type
   867 ;;		None
   868 ;; Auto vars:     Size  Location     Type
   869 ;;  i               2   71[BANK0 ] int 
   870 ;;  adcValues      64    0[BANK0 ] unsigned int [32]
   871 ;;  adc_Average     2   68[BANK0 ] unsigned int 
   872 ;;  adc_Return      2   66[BANK0 ] unsigned int 
   873 ;;  adc_Reading     2   64[BANK0 ] int 
   874 ;;  adc_index       1   70[BANK0 ] unsigned char 
   875 ;; Return value:  Size  Location     Type
   876 ;;                  2    0[COMMON] int 
   877 ;; Registers used:
   878 ;;		wreg, fsr1l, fsr1h, status,2, status,0
   879 ;; Tracked objects:
   880 ;;		On entry : 0/0
   881 ;;		On exit  : 0/0
   882 ;;		Unchanged: 0/0
   883 ;; Data sizes:     COMMON   BANK0   BANK1
   884 ;;      Params:         2       0       0
   885 ;;      Locals:         0      73       0
   886 ;;      Temps:          2       0       0
   887 ;;      Totals:         4      73       0
   888 ;;Total ram usage:       77 bytes
   889 ;; Hardware stack levels used:    1
   890 ;; This function calls:
   891 ;;		Nothing
   892 ;; This function is called by:
   893 ;;		_main
   894 ;; This function uses a non-reentrant model
   895 ;;
   896                           
   897                           
   898                           ;psect for function _tbat_media
   899  06B3                     _tbat_media:	
   900                           
   901                           ;main.c: 122:     int adc_Reading;;main.c: 123:     unsigned int adc_Average;;main.c: 12
      +                          4:     unsigned int adc_Return;;main.c: 125:     unsigned int adcValues [32];;main.c: 12
      +                          6:     unsigned char adc_index = 0;
   902                           
   903                           ;incstack = 0
   904                           ; Regs used in _tbat_media: [wreg+fsr1l+fsr1h+status,2+status,0]
   905  06B3  0020               	movlb	0	; select bank0
   906  06B4  01E6               	clrf	tbat_media@adc_index
   907                           
   908                           ;main.c: 127:     CHS0 = 1;
   909  06B5  0021               	movlb	1	; select bank1
   910  06B6  151D               	bsf	29,2	;volatile
   911                           
   912                           ;main.c: 128:     CHS1 = 0;
   913  06B7  119D               	bcf	29,3	;volatile
   914                           
   915                           ;main.c: 129:     CHS2 = 0;
   916  06B8  121D               	bcf	29,4	;volatile
   917                           
   918                           ;main.c: 130:     CHS3 = 0;
   919  06B9  129D               	bcf	29,5	;volatile
   920                           
   921                           ;main.c: 131:     CHS4 = 0;
   922  06BA  131D               	bcf	29,6	;volatile
   923                           
   924                           ;main.c: 132:     ADON = 1;
   925  06BB  141D               	bsf	29,0	;volatile
   926  06BC                     l994:	
   927                           ;main.c: 133:     while(adc_index<32){
   928                           
   929                           
   930                           ;main.c: 133:     while(adc_index<32){
   931  06BC  3020               	movlw	32
   932  06BD  0020               	movlb	0	; select bank0
   933  06BE  0266               	subwf	tbat_media@adc_index,w
   934  06BF  1803               	btfsc	3,0
   935  06C0  2EDD               	goto	l996
   936                           
   937                           ;main.c: 134:     _delay((unsigned long)((1)*(1000000/4000.0)));
   938  06C1  3053               	movlw	83
   939  06C2                     u397:	
   940  06C2  0B89               	decfsz	9,f
   941  06C3  2EC2               	goto	u397
   942  06C4  0000               	nop
   943                           
   944                           ;main.c: 135:     GO_nDONE = 1;
   945  06C5  0021               	movlb	1	; select bank1
   946  06C6  149D               	bsf	29,1	;volatile
   947  06C7                     l81:	
   948                           ;main.c: 136:     while (GO_nDONE==1);
   949                           
   950  06C7  189D               	btfsc	29,1	;volatile
   951  06C8  2EC7               	goto	l81
   952                           
   953                           ;main.c: 137:     adc_Reading = (ADRESH<<8) + ADRESL ;
   954  06C9  081C               	movf	28,w	;volatile
   955  06CA  0020               	movlb	0	; select bank0
   956  06CB  00E1               	movwf	tbat_media@adc_Reading+1
   957  06CC  0021               	movlb	1	; select bank1
   958  06CD  081B               	movf	27,w	;volatile
   959  06CE  0020               	movlb	0	; select bank0
   960  06CF  00E0               	movwf	tbat_media@adc_Reading
   961                           
   962                           ;main.c: 140:     adcValues[adc_index] = adc_Reading;
   963  06D0  3566               	lslf	tbat_media@adc_index,w
   964  06D1  3E20               	addlw	(low (tbat_media@adcValues| 0))& (0+255)
   965  06D2  0086               	movwf	6
   966  06D3  0187               	clrf	7
   967  06D4  0860               	movf	tbat_media@adc_Reading,w
   968  06D5  3FC0               	movwi [0]fsr1
   969  06D6  0861               	movf	tbat_media@adc_Reading+1,w
   970  06D7  3FC1               	movwi [1]fsr1
   971                           
   972                           ;main.c: 141:    adc_index++;
   973  06D8  3001               	movlw	1
   974  06D9  00F2               	movwf	??_tbat_media
   975  06DA  0872               	movf	??_tbat_media,w
   976  06DB  07E6               	addwf	tbat_media@adc_index,f
   977  06DC  2EBC               	goto	l994
   978  06DD                     l996:	
   979                           
   980                           ;main.c: 143:     adc_Average = 0;
   981  06DD  01E4               	clrf	tbat_media@adc_Average
   982  06DE  01E5               	clrf	tbat_media@adc_Average+1
   983                           
   984                           ;main.c: 144:    for (int i=0; i < 32; i++)
   985  06DF  01E7               	clrf	tbat_media@i
   986  06E0  01E8               	clrf	tbat_media@i+1
   987  06E1                     l1002:	
   988                           
   989                           ;main.c: 145:     {;main.c: 146:         adc_Average += adcValues[i];
   990  06E1  0020               	movlb	0	; select bank0
   991  06E2  3567               	lslf	tbat_media@i,w
   992  06E3  3E20               	addlw	(low (tbat_media@adcValues| 0))& (0+255)
   993  06E4  0086               	movwf	6
   994  06E5  0187               	clrf	7
   995  06E6  3F40               	moviw [0]fsr1
   996  06E7  00F2               	movwf	??_tbat_media
   997  06E8  3F41               	moviw [1]fsr1
   998  06E9  00F3               	movwf	??_tbat_media+1
   999  06EA  0872               	movf	??_tbat_media,w
  1000  06EB  07E4               	addwf	tbat_media@adc_Average,f
  1001  06EC  0873               	movf	??_tbat_media+1,w
  1002  06ED  3DE5               	addwfc	tbat_media@adc_Average+1,f
  1003                           
  1004                           ;main.c: 147:    }
  1005  06EE  3001               	movlw	1
  1006  06EF  07E7               	addwf	tbat_media@i,f
  1007  06F0  3000               	movlw	0
  1008  06F1  3DE8               	addwfc	tbat_media@i+1,f
  1009  06F2  0868               	movf	tbat_media@i+1,w
  1010  06F3  3A80               	xorlw	128
  1011  06F4  00F2               	movwf	??_tbat_media
  1012  06F5  3080               	movlw	128
  1013  06F6  0272               	subwf	??_tbat_media,w
  1014  06F7  1D03               	skipz
  1015  06F8  2EFB               	goto	u205
  1016  06F9  3020               	movlw	32
  1017  06FA  0267               	subwf	tbat_media@i,w
  1018  06FB                     u205:	
  1019  06FB  1C03               	skipc
  1020  06FC  2EE1               	goto	l1002
  1021                           
  1022                           ;main.c: 149:         adc_Return = adc_Average/32;
  1023  06FD  0020               	movlb	0	; select bank0
  1024  06FE  0865               	movf	tbat_media@adc_Average+1,w
  1025  06FF  00F3               	movwf	??_tbat_media+1
  1026  0700  0864               	movf	tbat_media@adc_Average,w
  1027  0701  00F2               	movwf	??_tbat_media
  1028  0702  3005               	movlw	5
  1029  0703                     u215:	
  1030  0703  36F3               	lsrf	??_tbat_media+1,f
  1031  0704  0CF2               	rrf	??_tbat_media,f
  1032  0705  0B89               	decfsz	9,f
  1033  0706  2F03               	goto	u215
  1034  0707  0872               	movf	??_tbat_media,w
  1035  0708  00E2               	movwf	tbat_media@adc_Return
  1036  0709  0873               	movf	??_tbat_media+1,w
  1037  070A  00E3               	movwf	tbat_media@adc_Return+1
  1038                           
  1039                           ;main.c: 151:     return (adc_Return);
  1040  070B  0863               	movf	tbat_media@adc_Return+1,w
  1041  070C  00F1               	movwf	?_tbat_media+1
  1042  070D  0862               	movf	tbat_media@adc_Return,w
  1043  070E  00F0               	movwf	?_tbat_media
  1044  070F  0008               	return
  1045  0710                     __end_of_tbat_media:	
  1046                           
  1047                           	psect	text2
  1048  069C                     __ptext2:	
  1049 ;; *************** function _pisca_led *****************
  1050 ;; Defined at:
  1051 ;;		line 40 in file "main.c"
  1052 ;; Parameters:    Size  Location     Type
  1053 ;;		None
  1054 ;; Auto vars:     Size  Location     Type
  1055 ;;		None
  1056 ;; Return value:  Size  Location     Type
  1057 ;;                  1    wreg      void 
  1058 ;; Registers used:
  1059 ;;		wreg
  1060 ;; Tracked objects:
  1061 ;;		On entry : 0/0
  1062 ;;		On exit  : 0/0
  1063 ;;		Unchanged: 0/0
  1064 ;; Data sizes:     COMMON   BANK0   BANK1
  1065 ;;      Params:         0       0       0
  1066 ;;      Locals:         0       0       0
  1067 ;;      Temps:          1       0       0
  1068 ;;      Totals:         1       0       0
  1069 ;;Total ram usage:        1 bytes
  1070 ;; Hardware stack levels used:    1
  1071 ;; This function calls:
  1072 ;;		Nothing
  1073 ;; This function is called by:
  1074 ;;		_main
  1075 ;; This function uses a non-reentrant model
  1076 ;;
  1077                           
  1078                           
  1079                           ;psect for function _pisca_led
  1080  069C                     _pisca_led:	
  1081                           
  1082                           ;incstack = 0
  1083                           ; Regs used in _pisca_led: [wreg]
  1084  069C  0022               	movlb	2	; select bank2
  1085  069D  120C               	bcf	12,4	;volatile
  1086  069E  3011               	movlw	17
  1087  069F  00F0               	movwf	??_pisca_led
  1088  06A0  303A               	movlw	58
  1089  06A1                     u407:	
  1090  06A1  0B89               	decfsz	9,f
  1091  06A2  2EA1               	goto	u407
  1092  06A3  0BF0               	decfsz	??_pisca_led,f
  1093  06A4  2EA1               	goto	u407
  1094  06A5  3200               	nop2
  1095  06A6  0022               	movlb	2	; select bank2
  1096  06A7  160C               	bsf	12,4	;volatile
  1097  06A8  3011               	movlw	17
  1098  06A9  00F0               	movwf	??_pisca_led
  1099  06AA  303A               	movlw	58
  1100  06AB                     u417:	
  1101  06AB  0B89               	decfsz	9,f
  1102  06AC  2EAB               	goto	u417
  1103  06AD  0BF0               	decfsz	??_pisca_led,f
  1104  06AE  2EAB               	goto	u417
  1105  06AF  3200               	nop2
  1106  06B0  0022               	movlb	2	; select bank2
  1107  06B1  120C               	bcf	12,4	;volatile
  1108  06B2  0008               	return
  1109  06B3                     __end_of_pisca_led:	
  1110                           
  1111                           	psect	text3
  1112  068C                     __ptext3:	
  1113 ;; *************** function _eeprom_read_code *****************
  1114 ;; Defined at:
  1115 ;;		line 201 in file "main.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  ADRL            2    0[COMMON] unsigned int 
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;		None
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  2    0[COMMON] int 
  1122 ;; Registers used:
  1123 ;;		wreg
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMMON   BANK0   BANK1
  1129 ;;      Params:         2       0       0
  1130 ;;      Locals:         0       0       0
  1131 ;;      Temps:          2       0       0
  1132 ;;      Totals:         4       0       0
  1133 ;;Total ram usage:        4 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; This function calls:
  1136 ;;		Nothing
  1137 ;; This function is called by:
  1138 ;;		_main
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           
  1143                           ;psect for function _eeprom_read_code
  1144  068C                     _eeprom_read_code:	
  1145  068C                     l107:	
  1146                           ;main.c: 202:     while(RD || WR);
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in _eeprom_read_code: [wreg]
  1150                           
  1151  068C  0023               	movlb	3	; select bank3
  1152  068D  1815               	btfsc	21,0	;volsfr
  1153  068E  2E8C               	goto	l107
  1154  068F  1895               	btfsc	21,1	;volsfr
  1155  0690  2E8C               	goto	l107
  1156                           
  1157                           ;main.c: 203:     EEADRL = ADRL;
  1158  0691  0870               	movf	eeprom_read_code@ADRL,w
  1159  0692  0091               	movwf	17	;volatile
  1160                           
  1161                           ;main.c: 204:     RD = 1;
  1162  0693  1415               	bsf	21,0	;volsfr
  1163                           
  1164                           ;main.c: 205:     return(EEDATL);
  1165  0694  0813               	movf	19,w	;volatile
  1166  0695  00F2               	movwf	??_eeprom_read_code
  1167  0696  01F3               	clrf	??_eeprom_read_code+1
  1168  0697  0872               	movf	??_eeprom_read_code,w
  1169  0698  00F0               	movwf	?_eeprom_read_code
  1170  0699  0873               	movf	??_eeprom_read_code+1,w
  1171  069A  00F1               	movwf	?_eeprom_read_code+1
  1172  069B  0008               	return
  1173  069C                     __end_of_eeprom_read_code:	
  1174  007E                     btemp	set	126	;btemp
  1175  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  32
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6       6
    BANK0            80     73      73
    BANK1            32     16      16

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_eeprom_read_code
    _main->_tbat_media

Critical Paths under _main in BANK0

    _main->_tbat_media

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                18    18      0     816
                                              4 COMMON     2     2      0
                                              0 BANK1     16    16      0
                   _eeprom_read_code
                          _pisca_led
                         _tbat_media
 ---------------------------------------------------------------------------------
 (1) _tbat_media                                          77    75      2     232
                                              0 COMMON     4     2      2
                                              0 BANK0     73    73      0
 ---------------------------------------------------------------------------------
 (1) _pisca_led                                            1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _eeprom_read_code                                     4     2      2     326
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eeprom_read_code
   _pisca_led
   _tbat_media

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM              70      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       6       2       42.9%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0       0       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     49      49       6       91.3%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            20      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               20     10      10       8       50.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
DATA                 0      0       0       9        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V2.05 build -831301201 
Symbol Table                                                                                   Fri Oct 29 09:39:26 2021

              __CFG_CP$OFF 0000                         l81 06C7                         _RD 0CA8  
                       _WR 0CA9                        l107 068C                        l125 07F6  
                      l994 06BC                        _GIE 005F                        l996 06DD  
                      u205 06FB                        u215 0703                        u307 0745  
                      u245 07AB                        u317 0752                        u407 06A1  
                      u255 07C2                        u327 0764                        u417 06AB  
                      u265 079F                        u337 0772               __CFG_CPD$OFF 0000  
                      u275 07E1                        u347 0780                        u285 07D5  
                      u357 0792                        u367 07B0                        u377 07C8  
                      u297 0737                        u387 07EC                        u397 06C2  
             __CFG_BORV$HI 0000                        wreg 0009               __CFG_LVP$OFF 0000  
                     l1002 06E1                       l1100 07F1                       l1104 07CB  
                     l1090 07C7                       l1074 0791                       l1084 07BA  
                     l1088 0795                       _ADFM 04F7                       _ADON 04E8  
                     _CHS0 04EA                       _CHS1 04EB                       _CHS2 04EC  
                     _CHS3 04ED                       _CHS4 04EE                       _LATA 010C  
                     _LATC 010E                       _WREN 0CAA               __CFG_WRT$OFF 0000  
                     _main 0710                       fsr1h 0007                       fsr1l 0006  
                     btemp 007E              __CFG_BOREN$ON 0000                       start 0001  
            __CFG_IESO$OFF 0000              __CFG_MCLRE$ON 0000                      _ADCS0 04F4  
                    _ADCS1 04F5                      _ADCS2 04F6                      ?_main 0070  
            __CFG_WDTE$OFF 0000                      _PORTA 000C                      _PORTC 000E  
                    _TRISA 008C                      _TRISC 008E              __CFG_PWRTE$ON 0000  
           __CFG_FCMEN$OFF 0000                      main@a 00A8                      main@b 00A6  
                    wtemp0 007E            __initialization 07FE               __end_of_main 07FE  
                   ??_main 0074             __CFG_PLLEN$OFF 0000                     _ADRESH 009C  
                   _ADRESL 009B                     _EEADRL 0191                     _EEDATL 0193  
                   _EECON2 0196                     _ANSELA 018C                     _ANSELC 018E  
         _eeprom_read_code 068C                     _OSCCON 0099     main@bit_low_adrsh_read 00AC  
   main@bit_low_adrsl_read 00A0    __end_of__initialization 07FE             __pcstackCOMMON 0070  
              tbat_media@i 0067                 __pmaintext 0710         __size_of_pisca_led 0017  
                  _ADPREF0 04F0                    _ADPREF1 04F1       eeprom_read_code@ADRL 0070  
                  _OSCTUNE 0098            __CFG_STVREN$OFF 0000   __end_of_eeprom_read_code 069C  
                  __ptext1 06B3                    __ptext2 069C                    __ptext3 068C  
               _tbat_media 06B3                    main@max 00A4                    main@min 00AA  
     end_of_initialization 07FE          __end_of_pisca_led 06B3           __CFG_FOSC$INTOSC 0000  
    tbat_media@adc_Average 0064      tbat_media@adc_Reading 0060        start_initialization 07FE  
              ?_tbat_media 0070                  ___latbits 0000              __pcstackBANK0 0020  
            __pcstackBANK1 00A0    main@bit_high_adrsh_read 00AE    main@bit_high_adrsl_read 00A2  
      __size_of_tbat_media 005D          ?_eeprom_read_code 0070         ??_eeprom_read_code 0072  
                 _LATAbits 010C                   _LATCbits 010E                  _pisca_led 069C  
                 _GO_nDONE 04E9       tbat_media@adc_Return 0062                 ?_pisca_led 0070  
             ??_tbat_media 0072              __size_of_main 00EE         __end_of_tbat_media 0710  
      tbat_media@adcValues 0020        tbat_media@adc_index 0066          __CFG_CLKOUTEN$OFF 0000  
              ??_pisca_led 0070  __size_of_eeprom_read_code 0010  
